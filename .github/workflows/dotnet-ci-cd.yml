name: .NET CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults/

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive || true
        dotnet list package --deprecated || true

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Render (Staging)
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID_STAGING }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: Health check (Staging)
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || curl -f ${{ secrets.STAGING_URL }}/swagger/index.html
      continue-on-error: true

    - name: Notify staging deployment success
      if: success()
      run: |
        echo "‚úÖ Staging deployment successful!"
        echo "API URL: ${{ secrets.STAGING_URL }}"
        echo "Swagger: ${{ secrets.STAGING_URL }}/swagger"     

  deploy-production:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Render (Production)
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: Health check (Production)
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/health || curl -f ${{ secrets.PRODUCTION_URL }}/swagger/index.html
      continue-on-error: true
      
    - name: Notify production deployment success
      if: success()
      run: |
        echo "üöÄ Production deployment successful!"
        echo "API URL: ${{ secrets.PRODUCTION_URL }}"
        echo "Swagger: ${{ secrets.PRODUCTION_URL }}/swagger"

  notify-failure:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify deployment failure
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for more details."
